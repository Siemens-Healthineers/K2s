---
###
### Linkerd Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
    pod-security.kubernetes.io/enforce: privileged
---
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
# TODO(ver) Restrict this to the Linkerd namespace. See
# https://github.com/linkerd/linkerd2/issues/9367
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["workload.linkerd.io"]
  resources: ["externalworkloads"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create", "get", "update", "patch"]
- apiGroups: ["discovery.k8s.io"]
  resources: ["endpointslices"]
  verbs: ["list", "get", "watch", "create", "update", "patch", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUpGVWJMSVY2d2hJM080NmhwTEFPKzB3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNalV3TkRBNU1EYzFNek14V2hjTk1qWXdOREE1TURjMU16TXhXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUwybkJseWw0RTY1cVhNc3dKTWQyd2JUa3NkUm96bmtLbjJEdXhGdU56S2g0MUxFeW5JSgp5WnZSNnB2b1BOSEVVbCtDVUhWY0t6elE5OGxKRDA5aEhuL3Z0aVQvZ2J1QjQrWDBDSGUxUWpBZ0FKQmNhNld2CmdrZU0rRUdsRTZ5K2pNLzFCRldSb1ZnV0VDbWw1QzYrUStZcUhvSWh1TlBDMU03VUthVVo2MFRRdE5FYldtRnYKU2l0amlRMldDZ2p2NEYwWXh4dm4wUVhabVJ3S3d1YUllQzJ2cDlRMU1XMlpubzRiYzQ0MC96TlRySk1YUjJhdgphMzNEZ2t2M0lLcythdjBtWis1Y01RNzVUNHZvR1VJV1dtNWJmMUIrM240VmdWMElQR05sT2NuV20rcFZoZEcyCjFyS1p1SUtmZFhCYmkxWXM3d2pZZDIxbSt4a1JQRFZRZS84Q0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBWElsb09xMlJ6OWxLdG4wcWlRbnA5c3QzVXhZZmhrMWNhZU1Vd0taaDAKa3pZd2kyb0ZLYUNyWTR5aHZjb1ByT2s3cGtYNG1ndzNwc25sK0VLeGlQZk0vVlJCalJkSnVCbE5pZ1dhdzRXMwowRjdEVGRJdmx4L2ZpTDNIbjFLZzYyUDFzNmxOZENoMVFQbWcrTXp5b2FNV21WWmhpMkxadEFRbTFBbTFJR1EyCnRNMnpOSDh1ZS9FMHpwcndlRG1mbkJ1ZittQ0g4RERYZkMzYWgzbjUyUzFGYmJsUGFYSFBha0orRmREelQrYnEKSUtFbGpOUlc2RzdxL05NQW9HWXVLMUJ6OXRwTE5KU2hnSGhTL29Hb0pLRmRNTWg2aDhJWW1UWXozYnMzVU1kWApGNHZwT3daUXBpdkhTbzZCUllneTI1ejl6V2M0R09LbFhTNnBvM0FBYmdvdwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdmFjR1hLWGdUcm1wY3l6QWt4M2JCdE9TeDFHak9lUXFmWU83RVc0M01xSGpVc1RLCmNnbkptOUhxbStnODBjUlNYNEpRZFZ3clBORDN5VWtQVDJFZWYrKzJKUCtCdTRIajVmUUlkN1ZDTUNBQWtGeHIKcGErQ1I0ejRRYVVUckw2TXovVUVWWkdoV0JZUUthWGtMcjVENWlvZWdpRzQwOExVenRRcHBSbnJSTkMwMFJ0YQpZVzlLSzJPSkRaWUtDTy9nWFJqSEcrZlJCZG1aSEFyQzVvaDRMYStuMURVeGJabWVqaHR6ampUL00xT3NreGRIClpxOXJmY09DUy9jZ3F6NXEvU1puN2x3eER2bFBpK2daUWhaYWJsdC9VSDdlZmhXQlhRZzhZMlU1eWRhYjZsV0YKMGJiV3NwbTRncDkxY0Z1TFZpenZDTmgzYldiN0dSRThOVkI3L3dJREFRQUJBb0gvWlgzODZaZmJja1hwYUxtSwpWVENsQmdJemluY2w0dFUzNS9PWEtMelN6VVhWWVhYdTRSaGJ6QWVLaGVUQ3AzOW9sYlFuV3FiNGZKTllCMkFSCjBXa242VTlmS20yUi84YURMNHhvKzZjRXhMeGJrT1hrdGNZMjhoTit4NktQNU9JVWVUV21IQ1RUTTFDYlZhNXgKYnBKanc4akdpdDJCQzlJNEVIZDUwZUVOQnNXOFd1eUo5NXozWUV2eTNFMkFldXY0aVhQOVBzNm5KOVYwOE53MgpFMHlvQk1RY2NEeHo3V1FsbUphc09DSkJMYkg1UHIvcktVeWFKeUwxVFlUek9IOWdxdDNIdExaQXhVVUFKdG5XCkRndU5uQzE3L0tXQ3NWejg2dDVQZzQ4RklQdW51M1JvMzQrclliTTVLblZpSkNWVmEzODJCRHlFa1p1YnpuZG4KYXAyeEFvR0JBUGxRNEsvQWszUGpQUGZHVHo0UTFQVjhrM1BudnZlVVBTTTVvTzlTQmZoWXFnL0tIdlBqbVhyQwo4eGFOSytvQWF1VVV1N05zT0tmZmdRVFgrSnhnK08xcEVTdGxGRlVzY3pZc3FvR2psNjNOQjVacEdFOTg4RFF6Ckc3QkJwWXRIZXhCQ1Bjd3pmMUNzUDc2Y1F6end5UTBjZXdNSmQ1NWxITE1QN2V3ODV3ckhBb0dCQU1LOHFSelIKS0pNSUlGckxlbkRRRXBtcmFGQUhzWEs5VUpKVnJNLzJsNDR2eTJ5dDRFRDRpa2RTTVRSQTdnbG5Vd0dJTjhTNgpoaWV0c21ZMWNBZVVMZkwrSTFsZFloaWx3SFFsbDA3clZHMjkzQ1JrV21yZDRNSmNwUjByVmdxbnVXRTE1dUErCitOaFp2NTZXbXJvdU82WkhGNFJEcmxTNWt0Tm9UQWRRTXcwSkFvR0FCWDlBQlFBRkFFZ2hYd0V6WEJYNDdCUzgKRjVFamg4ZnY5U2ZmSVllNGMvcFlmWktpVGhSVm5QeFJhY3poQy83SVhKYXhjTXBSRVhwL0dNRStUUXhpVUxIQgpYQ2lWWXk5Z3R2QVRMbHFTREpYNXRkcEpXKzlRU0laYjlPM3RuWDJNL0JYSjBRZk5wZFMyYnhoNDd3NE1FTXJ3CjkyY3RDUVFIdHZjQjh2U0F6NThDZ1lFQXVza1UrS1FTWS8xZWMxaEs2QnhjU3ZOalNhZ25aMlA0L1hPYUg1dHEKUVNMTTMwQmtJazJDN09nRWRCZDNlcU9WdFpsL3pINFFvY3gwbXA3VkJ4LzFkdWFXNTJldjZPNUxpOXhtcG5jSQo4MzR4d3VKUzY4Qklqb1VvaHJNRGc1TGZPRVBvWU4xbCtMY1ZHanRnekFYK2h2NFhxM0R6clNhV2s1cXRtakl0CjFXa0NnWUVBOGtBTldOclB6VWxEQjdhc2RudllxdG10WXlNTjkvV0hiK2sybVNTVDMzMlcwaEhPRDJNNmtrVnUKZ2NZbDhoTzduQkZHQUltRVByR0h5Zy9FclR5Z0hKVmxNMGJyWmNUZVdETlpKUFd2RWxrYnJ1SFJsanRDZzNPZwpsQmxoQVpLMzJpc1NLd2hSREhhS0hQTS9ULzdoaUNyaFpEcVlnSHJCVVFwclo3WCsrR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUpGVWJMSVY2d2hJM080NmhwTEFPKzB3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNalV3TkRBNU1EYzFNek14V2hjTk1qWXdOREE1TURjMU16TXhXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUwybkJseWw0RTY1cVhNc3dKTWQyd2JUa3NkUm96bmtLbjJEdXhGdU56S2g0MUxFeW5JSgp5WnZSNnB2b1BOSEVVbCtDVUhWY0t6elE5OGxKRDA5aEhuL3Z0aVQvZ2J1QjQrWDBDSGUxUWpBZ0FKQmNhNld2CmdrZU0rRUdsRTZ5K2pNLzFCRldSb1ZnV0VDbWw1QzYrUStZcUhvSWh1TlBDMU03VUthVVo2MFRRdE5FYldtRnYKU2l0amlRMldDZ2p2NEYwWXh4dm4wUVhabVJ3S3d1YUllQzJ2cDlRMU1XMlpubzRiYzQ0MC96TlRySk1YUjJhdgphMzNEZ2t2M0lLcythdjBtWis1Y01RNzVUNHZvR1VJV1dtNWJmMUIrM240VmdWMElQR05sT2NuV20rcFZoZEcyCjFyS1p1SUtmZFhCYmkxWXM3d2pZZDIxbSt4a1JQRFZRZS84Q0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBWElsb09xMlJ6OWxLdG4wcWlRbnA5c3QzVXhZZmhrMWNhZU1Vd0taaDAKa3pZd2kyb0ZLYUNyWTR5aHZjb1ByT2s3cGtYNG1ndzNwc25sK0VLeGlQZk0vVlJCalJkSnVCbE5pZ1dhdzRXMwowRjdEVGRJdmx4L2ZpTDNIbjFLZzYyUDFzNmxOZENoMVFQbWcrTXp5b2FNV21WWmhpMkxadEFRbTFBbTFJR1EyCnRNMnpOSDh1ZS9FMHpwcndlRG1mbkJ1ZittQ0g4RERYZkMzYWgzbjUyUzFGYmJsUGFYSFBha0orRmREelQrYnEKSUtFbGpOUlc2RzdxL05NQW9HWXVLMUJ6OXRwTE5KU2hnSGhTL29Hb0pLRmRNTWg2aDhJWW1UWXozYnMzVU1kWApGNHZwT3daUXBpdkhTbzZCUllneTI1ejl6V2M0R09LbFhTNnBvM0FBYmdvdwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQVBNcFZ3Z0VNb0RBcHVOMFVtRFlLc3N3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJMU1EUXdPVEEzTlRNek1Wb1hEVEkyTURRd09UQTNOVE16TVZvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBbXlQQUxIUTlPS3QrRXN5T1FMMVVqclhOZkdoL0V3TGxUakcrWUQzTwpsZVBrMXNYRWhjcU5sMWpycU5obCszVHVlbnhuYjFiTDl1UGdRdGxiQUhHTGlyem5PL0pHSm1YTURoemRDTkE0CnFGR2ExVlpGcFpBMVV4WWFuY2VOTWZFZEZMWWJSVitlOEd2LzhGRzlRUEdRSmVhWk04Tjk1VUtxcUx0YlVOcC8KUFlLZU1DVzJjMTExQXZGaUJkcDIwK1BxLzh6RFMyNXE3S0QwOWdzd0UwNGhFc0VOWitqYVFqR05OdmJpL0R1TgoxZTNSTTVmTisvNjV6M2lYaVpGTk9xU0VBcTMzaSsrVTM5VHE4MWVmc1BkcGljREZRbmhwUUFnakdRSlVHU1luClAwMFFibkw2RGViWTNQVUdrMS8wMEI2bWtXOEcydlZzS1hmT3ZOeU5GcnlnYXdJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQlNoNS9Na1pSMkt3dlNaTzJQQ0JrcmVRQVcKa0hEcDMyWUpETy9CZmM5b1ZKWG54WktEMEY1d2UrVUJrckQ5cWRhSENZUkRoWXdwbXgxYS9WWjZpbWtiUGFLcgpkSS9lY09wRWtnbCtQVWVCQkpGMlAyL0xEWHFzdlpuaWkwNXhaRzQrbHJUYXROb3Q2Mm1YSHpvRVZtNTMrcllJCkR2dnVZWHJjS3ROQmdEcGRGRXVJbkthZUNZemRhL2xBUGxIRUZlc04rRUF1bFpxNWFiMGZ5aXRRT0lRaXk1SHgKT2hUcERrR0Q0bXpJNFJIR2ZkTUtHUWpUVmFGQnFPb0oxU2hSVEk1RkQ3R2pRSmhsWFdXTktqWFJ6eUdDUGpBWgp0MW9aUHNmSnNaaUpVQlFVRnU0cU1OQlRqZ09iUHlWOWxmdFNVdkhzY2R0N01FaUZVZ09iVVpUVGV0REkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXlQQUxIUTlPS3QrRXN5T1FMMVVqclhOZkdoL0V3TGxUakcrWUQzT2xlUGsxc1hFCmhjcU5sMWpycU5obCszVHVlbnhuYjFiTDl1UGdRdGxiQUhHTGlyem5PL0pHSm1YTURoemRDTkE0cUZHYTFWWkYKcFpBMVV4WWFuY2VOTWZFZEZMWWJSVitlOEd2LzhGRzlRUEdRSmVhWk04Tjk1VUtxcUx0YlVOcC9QWUtlTUNXMgpjMTExQXZGaUJkcDIwK1BxLzh6RFMyNXE3S0QwOWdzd0UwNGhFc0VOWitqYVFqR05OdmJpL0R1TjFlM1JNNWZOCisvNjV6M2lYaVpGTk9xU0VBcTMzaSsrVTM5VHE4MWVmc1BkcGljREZRbmhwUUFnakdRSlVHU1luUDAwUWJuTDYKRGViWTNQVUdrMS8wMEI2bWtXOEcydlZzS1hmT3ZOeU5GcnlnYXdJREFRQUJBb0lCQUNkRzFkQnJYVlNMbGsrTQpHamVwdDA2cUdHdjJ5TFUzZG5abGdaMDhDS0ZLSVJWKzNGSkRCYlhiZlU0eCt4KythdUgzdlBnak1XQkFNUGE3CnNKNWNJTWZ2SzF1eDZyQ3Q5UXRkbzFnbjN6QTkrTVVxSWxmWU9xZmVZTDZ4VnIzZUhVNnhEQlowTHZrUFhxeXAKQlJEOEYxS0JIeWhMeGdQVTdQL3E3eU41TGQyVVh5ODlpYkJiK3o3TklrVVZEeVYxK001SWIvZ1F2RkNWUWRTUQpvQ2J1TW5vM0d3MzhzL3MzaFNtWDVhSUhIS1Uza1MyRlByd0JLSndaWEtIb0hndjdzdXAwakwxdUFIclZJNytECmFMTVBNMFF6dmJqMFRJaU9Nc21NcVdlNkpZeFRIWklZdjZndFZVeEEwczY5b2FveHdSQ1lGRzZ1TXNDdGhJekcKeXVFU0dJRUNnWUVBeG5KYk4wZ04wMWJtcjFUYW90NFFuVmh5WGVtMXFnV1JOYlhTYjg0SHRhUFZpb1M2ZlM4SgpVekJCSXQ3dnlDQURHSzNkQ3lVMDVwVEM1dDBkeFpxTzJ4WG5BMEFIL2UybHc3WnBJSVlwOHFVQnNmZ3l3Zmk0CklKblMrOGpZRlluOHI2azJWNHVGamE4RHRvTXJicS9wTldsTDZZcTFSbFgrMUFHdit1WTBEdDBDZ1lFQXlDSVIKdEFmcjl5c01hTmdqVDdtQzJnNEh1US9BVnJyWkp3ZW14ODZPMm1TbWplcjJERG83T3Ivbm9ScGlRZkRhVkRkZgp1YStKME0yUWhvaFY2Qll1MjIvK29vMm04V2pYQzBVMjh0ajMwK2pWd2VBV3FncnBZcWV0OFE1V1FmNS8zdGFxCnRjQWttb1c3Z3ExenR5R2pINmVnTXErL1F2azlLRDRWdmNOM0krY0NnWUE4WDFvRXpYVDNVTDdKcElVSGU0dU8KY3ZRSVFpdTBXQkUvUjl1SGpDU29TL21STktRUHBabXVwMFdKdUUwMmt4YWVFWGJvQngrNjdwTUU3VXc3YTdQKwpUd0dDNlo0RTBLSFhrczBVeWZ4RkI1SW1kSjNzaVNCck9xRUhYS2p3bEpROVZMdGxrdHJFcWZQMU9KNmtBL3hzCjlXWFUzUkFkSDlodzR6cUltRFJLT1FLQmdENk5oNE1CeHRzbWRXWi94K212VGhyaHI4QkVFQllMcUx2dVJFN0gKWFJjZHhvRXRJMktIQU9SSC94bjNxU1o3SllLVkhESnBqMlhZR29neUxNZXh4MHVISWN1bEFyMEp5ODBXQVNxKwpiaGVwK3NYeVNLTTFiZVVNQys0QVVTMm5Za2hBU0hNdWIwSnM4a0xSL0EwTlVuTWViWS9xSnBuRVZUMHl5cERaCmUyK1pBb0dCQUxocEMyNEZTRXFoRVVEWExiWmd6WEVvL3JLT1IvSThubU9sc3hsWU5OYS9PUVNzcCtFekwxcWMKWTQxdkkyc1dKUjFlUkZRdzluV213MCtQSkZRUTJEVmlObkZ5aG96NTBzMDNUUm5hYzcwVUtobXBpalZSb084YQpRaDBPUHQxeUI4azlzUUJsTERuRmlnYzc2d09keldCVWtuMG1waGRLQ3BNZWxhWnNkRVoyCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-policy-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-policy-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQVBNcFZ3Z0VNb0RBcHVOMFVtRFlLc3N3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJMU1EUXdPVEEzTlRNek1Wb1hEVEkyTURRd09UQTNOVE16TVZvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBbXlQQUxIUTlPS3QrRXN5T1FMMVVqclhOZkdoL0V3TGxUakcrWUQzTwpsZVBrMXNYRWhjcU5sMWpycU5obCszVHVlbnhuYjFiTDl1UGdRdGxiQUhHTGlyem5PL0pHSm1YTURoemRDTkE0CnFGR2ExVlpGcFpBMVV4WWFuY2VOTWZFZEZMWWJSVitlOEd2LzhGRzlRUEdRSmVhWk04Tjk1VUtxcUx0YlVOcC8KUFlLZU1DVzJjMTExQXZGaUJkcDIwK1BxLzh6RFMyNXE3S0QwOWdzd0UwNGhFc0VOWitqYVFqR05OdmJpL0R1TgoxZTNSTTVmTisvNjV6M2lYaVpGTk9xU0VBcTMzaSsrVTM5VHE4MWVmc1BkcGljREZRbmhwUUFnakdRSlVHU1luClAwMFFibkw2RGViWTNQVUdrMS8wMEI2bWtXOEcydlZzS1hmT3ZOeU5GcnlnYXdJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQlNoNS9Na1pSMkt3dlNaTzJQQ0JrcmVRQVcKa0hEcDMyWUpETy9CZmM5b1ZKWG54WktEMEY1d2UrVUJrckQ5cWRhSENZUkRoWXdwbXgxYS9WWjZpbWtiUGFLcgpkSS9lY09wRWtnbCtQVWVCQkpGMlAyL0xEWHFzdlpuaWkwNXhaRzQrbHJUYXROb3Q2Mm1YSHpvRVZtNTMrcllJCkR2dnVZWHJjS3ROQmdEcGRGRXVJbkthZUNZemRhL2xBUGxIRUZlc04rRUF1bFpxNWFiMGZ5aXRRT0lRaXk1SHgKT2hUcERrR0Q0bXpJNFJIR2ZkTUtHUWpUVmFGQnFPb0oxU2hSVEk1RkQ3R2pRSmhsWFdXTktqWFJ6eUdDUGpBWgp0MW9aUHNmSnNaaUpVQlFVRnU0cU1OQlRqZ09iUHlWOWxmdFNVdkhzY2R0N01FaUZVZ09iVVpUVGV0REkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["policy.linkerd.io"]
    apiVersions: ["*"]
    resources:
    - authorizationpolicies
    - httplocalratelimitpolicies
    - httproutes
    - networkauthentications
    - meshtlsauthentications
    - serverauthorizations
    - servers
    - egressnetworks
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["gateway.networking.k8s.io"]
    apiVersions: ["*"]
    resources:
    - httproutes
    - grpcroutes
    - tlsroutes
    - tcproutes
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
  - apiGroups:
      - policy.linkerd.io
    resources:
      - authorizationpolicies
      - httplocalratelimitpolicies
      - httproutes
      - meshtlsauthentications
      - networkauthentications
      - servers
      - serverauthorizations
      - egressnetworks
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes
      - grpcroutes
      - tlsroutes
      - tcproutes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - httproutes/status
      - httplocalratelimitpolicies/status
      - egressnetworks/status
    verbs:
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes/status
      - grpcroutes/status
      - tlsroutes/status
      - tcproutes/status
    verbs:
      - patch
  - apiGroups:
      - workload.linkerd.io
    resources:
      - externalworkloads
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: remote-discovery
  namespace: linkerd
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-destination-remote-discovery
  namespace: linkerd
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: remote-discovery
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd


---
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRS0xHSFNld2hMYVpjNnRwSmFucnhaVEFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEkxTURRd09UQTNOVE16TUZvWERUSTJNRFF3T1RBM05UTXpNRm93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFPeGZHVUlWcDFzeGM0MEFyV0tZYmYycWVPa282Ri9URnAwU3h3cTRvdnZ0VHJEUApRZ2owK05MT0FNN0FvT1BqZUlhd0xCZ082V3JQN3BDUzhqRTRhdTkzb2l3ajVFb2MrbDFjcWxwa1JFbngvZHpiCjAzeFR4aVJOQmJibWZaSFdXUWgxUHpNNzd0QUJWYU1CL0VIUTdUKzBobkNtbGRRZVhYaTE2bjNkbGJIVHpmUVAKMzhMK3djd2gvSXQ4WkxpTmg1NUlEbFYxSlp1VlNjenRPNUFDQkhmRmpNdEtRRWE0VFErc0cwM1RTaWNDVlozRQppa0JTVzcwQ2ZWdTZHMlIwY1VtL2hNZjRrZFJISlJsRC8xUEY1cUJ6L2lzUUZ6Q0dXSlQybFExSktoQUsxbW9HCmQvaDd2YVdNejJuc3ZpREFoT0wrK01XMjYzeUptZnJhWU1EWUlDc0NBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTUR3cWp1NC9kYkdmbVZGeVZrOS8yRWI5dFVzTDNkUTlUbDUKYUJyVnQ2VmNTWDRnbUVLbDF4SjlWTjE5OENQV1NGdDZwWDh4UVBlTmFWNWRpaHJWVUFVeE1ySm1aY0NXQ1ZDWQovYlR1aHJCYjhJcE1zUll3VG5QYXM2YkJFS2x0THh5eUVlTys2OG5rUHFVMDVvRE1QdW5YOWdrdHBsODJEM2o5CmF6cUJMdXhISDhIRm5OTENESmRVRGFXTTZ2Z1RsY0R0TjZxY3c1NE9GdWg1QSsxTVRuOVZtblYxSm1ZV1htK1YKYzRHZU8wQXNDcUdCM3k2VG1DOEtidUNQOWFoS1FENFQ0S2Npa28wd2JWTlQ3Wm11VTNWL2xWM3hjb1lEN0V5UgpzRWQxMEJ0cW9UL25Xc0g4WDdFYjZjU1NMbGRJNTZ1YURBQUdCMWUrNWlyazFMVWJscVU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN0Y4WlFoV25XekZ6alFDdFlwaHQvYXA0NlNqb1g5TVduUkxIQ3JpaSsrMU9zTTlDCkNQVDQwczRBenNDZzQrTjRockFzR0E3cGFzL3VrSkx5TVRocTczZWlMQ1BrU2h6NlhWeXFXbVJFU2ZIOTNOdlQKZkZQR0pFMEZ0dVo5a2RaWkNIVS9NenZ1MEFGVm93SDhRZER0UDdTR2NLYVYxQjVkZUxYcWZkMlZzZFBOOUEvZgp3djdCekNIOGkzeGt1STJIbmtnT1ZYVWxtNVZKek8wN2tBSUVkOFdNeTBwQVJyaE5ENndiVGROS0p3SlZuY1NLClFGSmJ2UUo5VzdvYlpIUnhTYitFeC9pUjFFY2xHVVAvVThYbW9IUCtLeEFYTUlaWWxQYVZEVWtxRUFyV2FnWjMKK0h1OXBZelBhZXkrSU1DRTR2NzR4YmJyZkltWit0cGd3TmdnS3dJREFRQUJBb0lCQVFEcWNnelFjai9UZ01JVwpxZ1JQbGRjSzBrb3BJVTBTdG9Gb2ZGWjErTnFYdkRIZngwSzlOWldUS1lhOWkyeEpmTFp3Q1U5QzhZOXRSUjVmCndaQjlaM01SWC95M2dVWU9pSjEvZXNqdzdTQ2FvMjVqNEpuc1ovOVF4Q0NWNEJuT1MrZDFMeTNuZUZ1UGJyTnQKQWl3ZGI4ZlI5eEdkckcxUnZtaUJzUllMajN2SnF0NVBENkkrakhINkordEpRV1FoYnpxTGtDbzd5dVkvbmZlcQovZ0RZZnkzWWJyU0xUVDhhQ0ZmT0JKMzdCY1ZLQVRtMU5FdGtSOVJUTm0yQ2ZhRmV0WGkxdmRuUTZIdEVxdkFKCnZFbUIxS0l0eWZJMUdkU0ROeUZLMWNZVmJhMzdBMW1ERjlVZzFSQnd0dzV6SnVZcndxK2N1VjlybzZQWW9HbloKa2FXU0dvTjVBb0dCQVBRWGFPMTA3c0l5RExEOGVHWVVLdzNGeFJPVjdvcHpGZnZ2ZkZBSkIxVzUvcXdKamw0Two4RVlDN2JqSU5xS2t2ekk3OXkzdVpyeW8xMjFsY2ZWdzkyZGNQaUMwUnJ2NUxPYkNseWlneGU1by8rdVd2VTd1CndleitDdS9CazJ2cUoxVnFGNko1cW1adjNrY2Y0RHR4eWRJWjVPQU0yMlJmTktlTmxmRE9WR1VIQW9HQkFQZm4KUlJ4TlVjTC9UU05pTWdBS2VLb1FIQWFaUGNOMDRpQlVyWURUVXB0MkJlOFFoQjYyZEZIdVNZMUYrMnlDcG01bQprRVdJNStHdnpsbzI5YXRkN00wejNFL1J3a0hlMTlOWlB0MTlCRytCWk9UN1Z6cm5hNnhPc3piaW9UTDNhbXBkClhRT3NTOVg1MVc0Y1ZmeFdsOW53Tllpei9sY2NIaWpocVViQ0FhYTlBb0dCQUtMTzdvVGNKdGpPeTFwTnUvelMKWFBrOXZiclhtWmt0TkMrcnlHNFY1NWVOak1teFFnMkl4MGpiY1RaOERMMGxTQVk0cXlFdXo4WHNsR3g2YXExOApZUGpITlFWWldZak5wZDV4VXFPZHdRZkpiMUh6WkdlK3B3anRWZHdmY0xaZEkwazhqM0VtMTdxbHlVd0ZmZW9JCmRzWTEwVXlFSnQzbkJ0YnZnR0J6THlXSEFvR0FJbXNXbWs1VjJyZnRjc3N3Vy9jWU42eFM1OHVnMnFGQXYvSmgKd0hBV21RVHkzL1V3RXIrTU9NL1hvR2lsOXJQUS9hVDV4TjIwTEE1bm5QamlkTzl1Y0RNU0ZIYnYvSXMrOWRYLwpOMnNqRVlRcWlPd29lVUltSGQ4elhKeHNleElFMFUyekcwNXhuUHk1MkRiUTdWN3NhRkxFYS8xcGc1aWd5MVpCClZWU2NQQlVDZ1lBTTl1SVB1UTM3Nk5OTmgySU93ekNncWhVSVlrcnBkeVhQMzNWcVlrZmlpSXZrbGJ5azJuNjAKVDRYNitEL2Zaa0dyZHBQUHpNdWE3RUFOdWNhcWl3MFBUZDJyZmdna3ZBUFR5cTdZNGlTSFZuQ1lnRDBJT0o3RQp0aVVpZHdVcWJKdnBUZUFnWjFJMFFLZy9jckVMSUlwV2RaTUV0YkhPT1IwbEljU3hwYnNMVHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - cert-manager
  objectSelector:
    null
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRS0xHSFNld2hMYVpjNnRwSmFucnhaVEFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEkxTURRd09UQTNOVE16TUZvWERUSTJNRFF3T1RBM05UTXpNRm93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFPeGZHVUlWcDFzeGM0MEFyV0tZYmYycWVPa282Ri9URnAwU3h3cTRvdnZ0VHJEUApRZ2owK05MT0FNN0FvT1BqZUlhd0xCZ082V3JQN3BDUzhqRTRhdTkzb2l3ajVFb2MrbDFjcWxwa1JFbngvZHpiCjAzeFR4aVJOQmJibWZaSFdXUWgxUHpNNzd0QUJWYU1CL0VIUTdUKzBobkNtbGRRZVhYaTE2bjNkbGJIVHpmUVAKMzhMK3djd2gvSXQ4WkxpTmg1NUlEbFYxSlp1VlNjenRPNUFDQkhmRmpNdEtRRWE0VFErc0cwM1RTaWNDVlozRQppa0JTVzcwQ2ZWdTZHMlIwY1VtL2hNZjRrZFJISlJsRC8xUEY1cUJ6L2lzUUZ6Q0dXSlQybFExSktoQUsxbW9HCmQvaDd2YVdNejJuc3ZpREFoT0wrK01XMjYzeUptZnJhWU1EWUlDc0NBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTUR3cWp1NC9kYkdmbVZGeVZrOS8yRWI5dFVzTDNkUTlUbDUKYUJyVnQ2VmNTWDRnbUVLbDF4SjlWTjE5OENQV1NGdDZwWDh4UVBlTmFWNWRpaHJWVUFVeE1ySm1aY0NXQ1ZDWQovYlR1aHJCYjhJcE1zUll3VG5QYXM2YkJFS2x0THh5eUVlTys2OG5rUHFVMDVvRE1QdW5YOWdrdHBsODJEM2o5CmF6cUJMdXhISDhIRm5OTENESmRVRGFXTTZ2Z1RsY0R0TjZxY3c1NE9GdWg1QSsxTVRuOVZtblYxSm1ZV1htK1YKYzRHZU8wQXNDcUdCM3k2VG1DOEtidUNQOWFoS1FENFQ0S2Npa28wd2JWTlQ3Wm11VTNWL2xWM3hjb1lEN0V5UgpzRWQxMEJ0cW9UL25Xc0g4WDdFYjZjU1NMbGRJNTZ1YURBQUdCMWUrNWlyazFMVWJscVU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services"]
    scope: "Namespaced"
  sideEffects: None
  timeoutSeconds: 10
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
data:
  linkerd-crds-chart-version: linkerd-crds-1.0.0-edge
  values: |
    cliVersion: linkerd/cli edge-25.3.3
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8
    cniEnabled: false
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controller:
      podDisruptionBudget:
        maxUnavailable: 1
    controllerGID: -1
    controllerImage: cr.l5d.io/linkerd/controller
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 1
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: edge-25.3.3
    deploymentStrategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
    destinationController:
      meshedHttp2ClientProtobuf:
        keep_alive:
          interval:
            seconds: 10
          timeout:
            seconds: 3
          while_idle: true
      podAnnotations: {}
    destinationProxyResources: null
    destinationResources: null
    disableHeartBeat: true
    disableIPv6: true
    egress:
      globalEgressNetworkNamespace: linkerd-egress
    enableEndpointSlices: true
    enableH2Upgrade: true
    enablePodAntiAffinity: false
    enablePodDisruptionBudget: false
    heartbeat: null
    heartbeatResources: null
    heartbeatSchedule: ""
    highAvailability: false
    identity:
      additionalEnv: null
      experimentalEnv: null
      externalCA: true
      issuer:
        clockSkewAllowance: 20s
        issuanceLifetime: 24h0m0s
        scheme: kubernetes.io/tls
        tls:
          crtPEM: |
            -----BEGIN CERTIFICATE-----
            MIIBiTCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
            eS5saW5rZXJkLjAeFw0yNTA0MDkwNzUzMjBaFw0yNjA0MDkwNzUzNDBaMBwxGjAY
            BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
            QgAECeLgjjLNF4JIZkbx2/gxOFas81pq2r3FMUOH8smqgn7Kas44AkXrPtEBxQ6g
            erbvyPw6LnUaTThvj/mrxAG7faNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
            MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
            BBStui0wRo2Z3C3AsmqO3uS+2spLXjAKBggqhkjOPQQDAgNJADBGAiEAh0YUHrlj
            2LerzsnSmZ/LvAHC9Fkb+h5jS4S9HroSlB4CIQDtxoUzAZynVAL6v1K0mTVFY7mK
            Ay3FEr4bTc27mX1ZFw==
            -----END CERTIFICATE-----
      kubeAPI:
        clientBurst: 200
        clientQPS: 100
      podAnnotations: {}
      serviceAccountTokenProjection: true
    identityProxyResources: null
    identityResources: null
    identityTrustAnchorsPEM: |
      -----BEGIN CERTIFICATE-----
      MIIBiTCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
      eS5saW5rZXJkLjAeFw0yNTA0MDkwNzUzMjBaFw0yNjA0MDkwNzUzNDBaMBwxGjAY
      BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
      QgAECeLgjjLNF4JIZkbx2/gxOFas81pq2r3FMUOH8smqgn7Kas44AkXrPtEBxQ6g
      erbvyPw6LnUaTThvj/mrxAG7faNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
      MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
      BBStui0wRo2Z3C3AsmqO3uS+2spLXjAKBggqhkjOPQQDAgNJADBGAiEAh0YUHrlj
      2LerzsnSmZ/LvAHC9Fkb+h5jS4S9HroSlB4CIQDtxoUzAZynVAL6v1K0mTVFY7mK
      Ay3FEr4bTc27mX1ZFw==
      -----END CERTIFICATE-----
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    linkerdVersion: edge-25.3.3
    networkValidator:
      connectAddr: ""
      enableSecurityContext: true
      listenAddr: ""
      logFormat: plain
      logLevel: debug
      timeout: 10s
    nodeAffinity: null
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    podMonitor:
      controller:
        enabled: true
        namespaceSelector: |
          matchNames:
            - {{ .Release.Namespace }}
            - linkerd-viz
            - linkerd-jaeger
      enabled: false
      proxy:
        enabled: true
      scrapeInterval: 10s
      scrapeTimeout: 10s
      serviceMirror:
        enabled: true
    policyController:
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: info
      probeNetworks:
      - 0.0.0.0/0
      - ::/0
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    priorityClassName: ""
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      accessLog: ""
      additionalEnv: null
      await: false
      capabilities: null
      control:
        streams:
          idleTimeout: 5m
          initialTimeout: 3s
          lifetime: 1h
      defaultInboundPolicy: all-authenticated
      disableInboundProtocolDetectTimeout: false
      disableOutboundProtocolDetectTimeout: false
      enableExternalProfiles: false
      enableShutdownEndpoint: false
      experimentalEnv: null
      gid: -1
      image:
        name: shsk2s.azurecr.io/linkerd/proxy
        pullPolicy: ""
        version: ""
      inbound:
        server:
          http2:
            keepAliveInterval: 10s
            keepAliveTimeout: 3s
      inboundConnectTimeout: 100ms
      inboundDiscoveryCacheUnusedTimeout: 90s
      isGateway: false
      isIngress: false
      livenessProbe:
        initialDelaySeconds: 10
        timeoutSeconds: 1
      logFormat: plain
      logHTTPHeaders: "off"
      logLevel: debug,linkerd=debug,hickory=error
      nativeSidecar: false
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outbound:
        server:
          http2:
            keepAliveInterval: 10s
            keepAliveTimeout: 3s
      outboundConnectTimeout: 1000ms
      outboundDiscoveryCacheUnusedTimeout: 5s
      outboundTransportMode: transport-header
      podInboundPorts: ""
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      readinessProbe:
        initialDelaySeconds: 2
        timeoutSeconds: 1
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: 100Mi
          request: ""
      runtime:
        workers:
          minimum: 1
      saMountPath: null
      shutdownGracePeriod: ""
      startupProbe:
        failureThreshold: 120
        initialDelaySeconds: 0
        periodSeconds: 1
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyContainerName: linkerd-proxy
    proxyInit:
      capabilities: null
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568
      ignoreOutboundPorts: 4567,4568
      image:
        name: shsk2s.azurecr.io/linkerd/proxy-init
        pullPolicy: ""
        version: v2.4.2
      iptablesMode: legacy
      kubeAPIServerPorts: 443,6443
      logFormat: ""
      logLevel: ""
      privileged: false
      resources: null
      runAsGroup: 65534
      runAsRoot: false
      runAsUser: 65534
      saMountPath: null
      skipSubnets: ""
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
        readOnly: false
    proxyInjector:
      additionalEnv: null
      caBundle: ""
      crtPEM: ""
      experimentalEnv: null
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
          - kube-system
          - cert-manager
      podAnnotations: {}
    proxyInjectorProxyResources: null
    proxyInjectorResources: null
    revisionHistoryLimit: 10
    spValidator:
      livenessProbe:
        timeoutSeconds: 1
      readinessProbe:
        timeoutSeconds: 1
    tolerations: null
    webhookFailurePolicy: Ignore
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
  name: ext-namespace-metadata-linkerd-config
  namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
---
###
### Identity Controller Service
###


kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-25.3.3
        linkerd.io/proxy-version: edge-25.3.3
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        linkerd.io/trust-root-sha256: 7112f8f14e35c9e9d6199290406a7a359a9e6ad0c0fce678e5eab22540d107a0
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - args:
        - identity
        - -log-level=info
        - -log-format=plain
        - -controller-namespace=linkerd
        - -identity-trust-domain=cluster.local
        - -identity-issuance-lifetime=24h0m0s
        - -identity-clock-skew-allowance=20s
        - -identity-scheme=kubernetes.io/tls
        - -enable-pprof=false
        - -kube-apiclient-qps=100
        - -kube-apiclient-burst=200
        env:
        - name: LINKERD_DISABLED
          value: "linkerd-await cannot block the identity controller"
        image: cr.l5d.io/linkerd/controller:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
        - mountPath: /var/run/linkerd/identity/trust-roots/
          name: trust-roots
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_uid
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: _pod_containerName
          value: &containerName linkerd-proxy
        - name: LINKERD2_PROXY_CORES
          value: "1"
        - name: LINKERD2_PROXY_CORES_MIN
          value: "1"
        - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
          value: "8080"
        - name: LINKERD2_PROXY_SHUTDOWN_ENDPOINT_ENABLED
          value: "false"
        - name: LINKERD2_PROXY_LOG
          value: "debug,linkerd=debug,hickory=error,[{headers}]=off,[{request}]=off"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: |
            {"ns":"$(_pod_ns)", "pod":"$(_pod_name)"}
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8"
        - name: LINKERD2_PROXY_CONTROL_STREAM_INITIAL_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_CONTROL_STREAM_IDLE_TIMEOUT
          value: "5m"
        - name: LINKERD2_PROXY_CONTROL_STREAM_LIFETIME
          value: "1h"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_OUTBOUND_DISCOVERY_IDLE_TIMEOUT
          value: "5s"
        - name: LINKERD2_PROXY_INBOUND_DISCOVERY_IDLE_TIMEOUT
          value: "90s"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: "0.0.0.0:4190"
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: "0.0.0.0:4191"
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: "127.0.0.1:4140"
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDRS
          value: "127.0.0.1:4140"
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: "0.0.0.0:4143"
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8080,9990"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_USER_TIMEOUT
          value: 30s
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_USER_TIMEOUT
          value: 30s
        - name: LINKERD2_PROXY_INBOUND_SERVER_HTTP2_KEEP_ALIVE_INTERVAL
          value: "10s"
        - name: LINKERD2_PROXY_INBOUND_SERVER_HTTP2_KEEP_ALIVE_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_OUTBOUND_SERVER_HTTP2_KEEP_ALIVE_INTERVAL
          value: "10s"
        - name: LINKERD2_PROXY_OUTBOUND_SERVER_HTTP2_KEEP_ALIVE_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)", "pod":"$(_pod_name)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: shsk2s.azurecr.io/linkerd/proxy:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
          timeoutSeconds: 1
        name: *containerName
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
          timeoutSeconds: 1
        resources:
          limits:
            memory: "100Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2102
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      initContainers:
      - args:
        - --ipv6=false
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443,6443"
        image: shsk2s.azurecr.io/linkerd/proxy-init:v2.4.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            memory: "100Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: linkerd-identity
      volumes:
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8090
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: policy-https
    port: 443
    targetPort: policy-https
---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        checksum/config: 9685976a2da7219343ee79dd24265fec7e4b7ff5ebbc841dc2d3967e76ae4db0
        linkerd.io/created-by: linkerd/cli edge-25.3.3
        linkerd.io/proxy-version: edge-25.3.3
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        linkerd.io/trust-root-sha256: 7112f8f14e35c9e9d6199290406a7a359a9e6ad0c0fce678e5eab22540d107a0
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_uid
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: _pod_containerName
          value: &containerName linkerd-proxy
        - name: LINKERD2_PROXY_CORES
          value: "1"
        - name: LINKERD2_PROXY_CORES_MIN
          value: "1"
        - name: LINKERD2_PROXY_SHUTDOWN_ENDPOINT_ENABLED
          value: "false"
        - name: LINKERD2_PROXY_LOG
          value: "debug,linkerd=debug,hickory=error,[{headers}]=off,[{request}]=off"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: |
            {"ns":"$(_pod_ns)", "pod":"$(_pod_name)"}
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8"
        - name: LINKERD2_PROXY_CONTROL_STREAM_INITIAL_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_CONTROL_STREAM_IDLE_TIMEOUT
          value: "5m"
        - name: LINKERD2_PROXY_CONTROL_STREAM_LIFETIME
          value: "1h"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_OUTBOUND_DISCOVERY_IDLE_TIMEOUT
          value: "5s"
        - name: LINKERD2_PROXY_INBOUND_DISCOVERY_IDLE_TIMEOUT
          value: "90s"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: "0.0.0.0:4190"
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: "0.0.0.0:4191"
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: "127.0.0.1:4140"
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDRS
          value: "127.0.0.1:4140"
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: "0.0.0.0:4143"
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8086,8090,8443,9443,9990,9996,9997"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_USER_TIMEOUT
          value: 30s
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_USER_TIMEOUT
          value: 30s
        - name: LINKERD2_PROXY_INBOUND_SERVER_HTTP2_KEEP_ALIVE_INTERVAL
          value: "10s"
        - name: LINKERD2_PROXY_INBOUND_SERVER_HTTP2_KEEP_ALIVE_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_OUTBOUND_SERVER_HTTP2_KEEP_ALIVE_INTERVAL
          value: "10s"
        - name: LINKERD2_PROXY_OUTBOUND_SERVER_HTTP2_KEEP_ALIVE_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)", "pod":"$(_pod_name)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: shsk2s.azurecr.io/linkerd/proxy:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
          timeoutSeconds: 1
        name: *containerName
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
          timeoutSeconds: 1
        resources:
          limits:
            memory: "100Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2102
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -outbound-transport-mode=transport-header
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=true
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        - -enable-ipv6=false
        - -enable-pprof=false
        - --meshed-http2-client-params={"keep_alive":{"interval":{"seconds":10},"timeout":{"seconds":3},"while_idle":true}}
        image: cr.l5d.io/linkerd/controller:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
          timeoutSeconds: 1
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
          timeoutSeconds: 1
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --control-plane-namespace=linkerd
        - --grpc-addr=0.0.0.0:8090
        - --server-addr=0.0.0.0:9443
        - --server-tls-key=/var/run/linkerd/tls/tls.key
        - --server-tls-certs=/var/run/linkerd/tls/tls.crt
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8
        - --identity-domain=cluster.local
        - --cluster-domain=cluster.local
        - --default-policy=all-authenticated
        - --log-level=info
        - --log-format=plain
        - --default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        - --global-egress-network-namespace=linkerd-egress
        - --probe-networks=0.0.0.0/0,::/0
        image: cr.l5d.io/linkerd/policy-controller:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: admin-http
          initialDelaySeconds: 10
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin-http
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin-http
        resources:
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      initContainers:
      - args:
        - --ipv6=false
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443,6443"
        image: shsk2s.azurecr.io/linkerd/proxy-init:v2.4.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            memory: "100Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity

---
###
### Proxy Injector
###

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        checksum/config: 3124b37da46188d81e732977c8d391c7d55a17aa9467209d6e72e86ba677637a
        linkerd.io/created-by: linkerd/cli edge-25.3.3
        linkerd.io/proxy-version: edge-25.3.3
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        linkerd.io/trust-root-sha256: 7112f8f14e35c9e9d6199290406a7a359a9e6ad0c0fce678e5eab22540d107a0
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_uid
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: _pod_containerName
          value: &containerName linkerd-proxy
        - name: LINKERD2_PROXY_CORES
          value: "1"
        - name: LINKERD2_PROXY_CORES_MIN
          value: "1"
        - name: LINKERD2_PROXY_SHUTDOWN_ENDPOINT_ENABLED
          value: "false"
        - name: LINKERD2_PROXY_LOG
          value: "debug,linkerd=debug,hickory=error,[{headers}]=off,[{request}]=off"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: |
            {"ns":"$(_pod_ns)", "pod":"$(_pod_name)"}
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,fd00::/8"
        - name: LINKERD2_PROXY_CONTROL_STREAM_INITIAL_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_CONTROL_STREAM_IDLE_TIMEOUT
          value: "5m"
        - name: LINKERD2_PROXY_CONTROL_STREAM_LIFETIME
          value: "1h"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_OUTBOUND_DISCOVERY_IDLE_TIMEOUT
          value: "5s"
        - name: LINKERD2_PROXY_INBOUND_DISCOVERY_IDLE_TIMEOUT
          value: "90s"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: "0.0.0.0:4190"
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: "0.0.0.0:4191"
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: "127.0.0.1:4140"
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDRS
          value: "127.0.0.1:4140"
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: "0.0.0.0:4143"
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8443,9995"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_USER_TIMEOUT
          value: 30s
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_USER_TIMEOUT
          value: 30s
        - name: LINKERD2_PROXY_INBOUND_SERVER_HTTP2_KEEP_ALIVE_INTERVAL
          value: "10s"
        - name: LINKERD2_PROXY_INBOUND_SERVER_HTTP2_KEEP_ALIVE_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_OUTBOUND_SERVER_HTTP2_KEEP_ALIVE_INTERVAL
          value: "10s"
        - name: LINKERD2_PROXY_OUTBOUND_SERVER_HTTP2_KEEP_ALIVE_TIMEOUT
          value: "3s"
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)", "pod":"$(_pod_name)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: shsk2s.azurecr.io/linkerd/proxy:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
          timeoutSeconds: 1
        name: *containerName
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
          timeoutSeconds: 1
        resources:
          limits:
            memory: "100Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2102
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      - args:
        - proxy-injector
        - -log-level=info
        - -log-format=plain
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/trust-roots
          name: trust-roots
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      initContainers:
      - args:
        - --ipv6=false
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443,6443"
        image: shsk2s.azurecr.io/linkerd/proxy-init:v2.4.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            memory: "100Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-25.3.3
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
apiVersion: v1
data:
  linkerd-config-overrides: ZGlzYWJsZUhlYXJ0QmVhdDogdHJ1ZQppZGVudGl0eToKICBleHRlcm5hbENBOiB0cnVlCiAgaXNzdWVyOgogICAgc2NoZW1lOiBrdWJlcm5ldGVzLmlvL3RscwogICAgdGxzOgogICAgICBjcnRQRU06IHwKICAgICAgICAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KICAgICAgICBNSUlCaVRDQ0FTNmdBd0lCQWdJQkFUQUtCZ2dxaGtqT1BRUURBakFjTVJvd0dBWURWUVFERXhGcFpHVnVkR2wwCiAgICAgICAgZVM1c2FXNXJaWEprTGpBZUZ3MHlOVEEwTURrd056VXpNakJhRncweU5qQTBNRGt3TnpVek5EQmFNQnd4R2pBWQogICAgICAgIEJnTlZCQU1URVdsa1pXNTBhWFI1TG14cGJtdGxjbVF1TUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0QKICAgICAgICBRZ0FFQ2VMZ2pqTE5GNEpJWmtieDIvZ3hPRmFzODFwcTJyM0ZNVU9IOHNtcWduN0thczQ0QWtYclB0RUJ4UTZnCiAgICAgICAgZXJidnlQdzZMblVhVFRodmovbXJ4QUc3ZmFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwogICAgICAgIE1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVcKICAgICAgICBCQlN0dWkwd1JvMlozQzNBc21xTzN1Uysyc3BMWGpBS0JnZ3Foa2pPUFFRREFnTkpBREJHQWlFQWgwWVVIcmxqCiAgICAgICAgMkxlcnpzblNtWi9MdkFIQzlGa2IraDVqUzRTOUhyb1NsQjRDSVFEdHhvVXpBWnluVkFMNnYxSzBtVFZGWTdtSwogICAgICAgIEF5M0ZFcjRiVGMyN21YMVpGdz09CiAgICAgICAgLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQogICAgICBrZXlQRU06IHwKICAgICAgICAtLS0tLUJFR0lOIEVDIFBSSVZBVEUgS0VZLS0tLS0KICAgICAgICBNSGNDQVFFRUlCSXlZOGZpeTBoMGR1UHZOcE1WYjNabWtTT0o3aFpWZlNMOXNXeEw5TW0wb0FvR0NDcUdTTTQ5CiAgICAgICAgQXdFSG9VUURRZ0FFQ2VMZ2pqTE5GNEpJWmtieDIvZ3hPRmFzODFwcTJyM0ZNVU9IOHNtcWduN0thczQ0QWtYcgogICAgICAgIFB0RUJ4UTZnZXJidnlQdzZMblVhVFRodmovbXJ4QUc3ZlE9PQogICAgICAgIC0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0KaWRlbnRpdHlUcnVzdEFuY2hvcnNQRU06IHwKICAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KICBNSUlCaVRDQ0FTNmdBd0lCQWdJQkFUQUtCZ2dxaGtqT1BRUURBakFjTVJvd0dBWURWUVFERXhGcFpHVnVkR2wwCiAgZVM1c2FXNXJaWEprTGpBZUZ3MHlOVEEwTURrd056VXpNakJhRncweU5qQTBNRGt3TnpVek5EQmFNQnd4R2pBWQogIEJnTlZCQU1URVdsa1pXNTBhWFI1TG14cGJtdGxjbVF1TUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0QKICBRZ0FFQ2VMZ2pqTE5GNEpJWmtieDIvZ3hPRmFzODFwcTJyM0ZNVU9IOHNtcWduN0thczQ0QWtYclB0RUJ4UTZnCiAgZXJidnlQdzZMblVhVFRodmovbXJ4QUc3ZmFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwogIE1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVcKICBCQlN0dWkwd1JvMlozQzNBc21xTzN1Uysyc3BMWGpBS0JnZ3Foa2pPUFFRREFnTkpBREJHQWlFQWgwWVVIcmxqCiAgMkxlcnpzblNtWi9MdkFIQzlGa2IraDVqUzRTOUhyb1NsQjRDSVFEdHhvVXpBWnluVkFMNnYxSzBtVFZGWTdtSwogIEF5M0ZFcjRiVGMyN21YMVpGdz09CiAgLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpwcm94eToKICBhd2FpdDogZmFsc2UKICBkZWZhdWx0SW5ib3VuZFBvbGljeTogYWxsLWF1dGhlbnRpY2F0ZWQKICBpbWFnZToKICAgIG5hbWU6IHNoc2sycy5henVyZWNyLmlvL2xpbmtlcmQvcHJveHkKICBsb2dMZXZlbDogZGVidWcsbGlua2VyZD1kZWJ1ZyxoaWNrb3J5PWVycm9yCiAgcmVzb3VyY2VzOgogICAgbWVtb3J5OgogICAgICBsaW1pdDogMTAwTWkKcHJveHlJbml0OgogIGltYWdlOgogICAgbmFtZTogc2hzazJzLmF6dXJlY3IuaW8vbGlua2VyZC9wcm94eS1pbml0Cg==
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-overrides
  namespace: linkerd
