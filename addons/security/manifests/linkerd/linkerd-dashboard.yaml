# SPDX-FileCopyrightText: Â© 2025 Siemens Healthineers AG
#
# SPDX-License-Identifier: MIT
---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
    pod-security.kubernetes.io/enforce: privileged
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRVTFmMFgreFVBQVc5SnYzRTh5aFQwekFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEkxTURNeU1ERXlNRGd5TlZvWApEVEkyTURNeU1ERXlNRGd5TlZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTkR0M1lFdzFiSkI5Y0pQMkZsV2VSNnUKWFhUZm1ZN3E3T1hmT3l4L3Q3YWhGTkFsdW85b3VJNUU4RGF1YjVUYnltNmFNNHg3Qk4zM2pETXFKTEdJc0t1SgptblEwQWEzMXc3TTlraGN6YWlPSGszeTdFNUkwQlNTNFE0U2RwRTJlcU1wWnczL3UrWXNXMkxrUW1EMXRNQ25pCk1rN3Y1d3k0Y0ZoNjRPY2tYS2ZtalNWVzlkSnFKbEdnR2MyNHNQb1FGY1I5dkc4dk9XVDJOUVVPOTlHVUFzSkIKU2plaHpuTDlaeER3NHFldDMvWGtUNCt1ektPNll5NG5YQlJBbTJzR05VNjZyZE9UQVlvWHE2M3grNzEvK3RyTApZVUJPTjQraUJzVkd2ZnpXekxDNEVPbDRQdWlUbUY2UzFsVElaeFFOeFZJRi8vMi9PMmZoeHoySWhDNXU1RU1DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFESDNYZkIxSHJoOUNPVkNid0hpM29Ja1RKcDhneHpoCnBxdG1jVGkyRWt0b29UT0UxN2ZvdjZQVXUrZ0xJVjVzWnFlY2REVmZlbmdjMW1DeUdkdnJQS0VKUkhKSVZpUXAKRnNRRFQraHJuUllJY2VNejNqKzlQZnRyQ2xGVTZwbTZ2alhDK2NkVGttYWRvOHhwSnZrR0ZRVXdsMkRnYUg0Mwo5QTI3RVVWZ2tRVXQ5OHIyUXhuMmlmSXlmdmtNQzJDWVNaNHFKdnFqTWllZWxnampoRVZsQXV1ckJ0bDNoNkxUCnM1S3RFcHBoa3BPNjZqM2s1U2lsTE54SGhtYURBeDhZdHdJUVowc1owbjU4L0NheGd2K2xrSkIvOVJGWGE3RHIKRDlCMFFCeTUvOTJEcmwyUFJoa296RnlXemtEN1hOenNjV2wybGlkOWcwaFZFb1V6MGlNN0tKWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBME8zZGdURFZza0gxd2svWVdWWjVIcTVkZE4rWmp1cnM1ZDg3TEgrM3RxRVUwQ1c2CmoyaTRqa1R3TnE1dmxOdkticG96akhzRTNmZU1NeW9rc1lpd3E0bWFkRFFCcmZYRHN6MlNGek5xSTRlVGZMc1QKa2pRRkpMaERoSjJrVFo2b3lsbkRmKzc1aXhiWXVSQ1lQVzB3S2VJeVR1L25ETGh3V0hyZzV5UmNwK2FOSlZiMQowbW9tVWFBWnpiaXcraEFWeEgyOGJ5ODVaUFkxQlE3MzBaUUN3a0ZLTjZIT2N2MW5FUERpcDYzZjllUlBqNjdNCm83cGpMaWRjRkVDYmF3WTFUcnF0MDVNQmloZXJyZkg3dlgvNjJzdGhRRTQzajZJR3hVYTkvTmJNc0xnUTZYZysKNkpPWVhwTFdWTWhuRkEzRlVnWC8vYjg3WitISFBZaUVMbTdrUXdJREFRQUJBb0lCQVFDYUlhRHptZTlNbmxTTAprUlB1ZEZqT1JadzBpSEJrZXZOaGNoblpiaTg5ei8vbXZxNnU5WGFSbmxJSVJRK1VKY0ZsYnVUd2tpQzVEOUtpClBFanRvQVdWeHVIbk1DYTlDejNna1YraE5oRHJQUzJWS3YzNU1kOUpnNVpyMDFCTzR1bHF2bVgzajNrUkh6MnEKNlk4bVlkTFNVMGtCNndIczVIUWRFaW13MjZadlJkVDdiNUhXcWNEekkwNTQ0Zi9jTVFOU010NXYxbFh4ZzdxWQo2N2hnTUJPYml5T21KZHF0cGdvWVFZaGFBNkNRcVJhSFJrZGEwNDk0STJSako4VlRoRU1QeER3NHJhdGJLSmUxCktpNnhOb1JPOVl2NlpWdHJBMDV1SCsxSktULzRVU0NjWHRHTjZNSHRsZTBEbDlCWjdEQVk5YWFmVUt2TG16RGUKWEVQOFcvSkJBb0dCQU4zTVdhZXYrQWhTL2psMjVWc2VpZ0ZQVXZiSnlpU2doR3hMeC95Wm9zdm9GRnFBR2N6SgpzTDFQWnFMcSttYXBNOTQ1UjdXOFhtYlpSaytMY2xnRnF1TjFpZm4yQWdLaWRSN0JwRDhTN04wVjZ5RWFPMU51CnNqdlA0VjB6TnUrZU1ILytHcUQyYWRKdW1CY0lkalhzL1FaMnBKZG9malh0L1UzY1lrSm5TeXI3QW9HQkFQRWwKZjU0ZVp4QTVHN3g3RlROWUU5Rk0vNldMWEYzbTVTWlZ2Y0FyZHdkNW42RVIwQTVFRTliUWZyUHBIWHgwTGthdAo5S1FsVmt3ZURQa1pXMXhEeDBKb2Z4RmVqL3FaMTRidzZTMFhmdkh3dFZNbHRPZ21ucC9PeTBHRlBpSlNiRkx3CmZvVXBhTEw5ZzU1UUsrREpqY2UvRXpjSjFNd2tHVHIvTDl3eVJHbFpBb0dCQUprcExDQW4yOWVqdC9wbXFDc3MKQTVDei9rNTlPaUhnMXBFU0k1L0RXREFHcTBkemZsMTBTWi93M0tkVUxHWUlJZEVyTE9IS21rWGJkRG9weVdRUApSZHFjcUJMOFZwY0xLR1Y4d3JicmtyVjVGVTFlbCtrZFgrYjl2bHBscTJIOGt2RlB2NE8zcFl1eTQwUEVqQnpnCjhqa3NaS3hKZEI0NW9kbktmZS9zOUhOUkFvR0FMSHAySjN3RUZvSHlFN25BRjFCUGwzTlVVL3g0ZFBsNW1yQ0YKNTBRZEdFdmVuWjdqZVQ0bFNxSDZQTVRxbzJIcWh5N2V5TWY2T3Qvd0ZLSVFyOXZ3ak5jcFdOTFFTN0RFaUNjMwpXeEhTWUYyOWxEQ0lSYW1aNkhBRUhYbXVGRGFQdEZ5WGVZaEJ2NEh6SE9nOHI2RjlmVEpKSVFXM01sQVdOME9LCldGc05NMEVDZ1lFQXV2aytpMTF2QjZXU0RVTm8wdk93QVJUK2VPd08zd05HRGgraG5CYjJqbXEyN01Ndmk1NkEKVnlIUHhjaHAyQmN6aU94NGpMeFN3em5HdG1BV0p1V3JxK0JLVklOL0hFUkliV2lybzlVK0loUW04bGc1WEdPaAo4UVJGd0VwZnhvVjRxT1VLZ09mcnN2ZzJIYWVmdDR0b01jZk43VFZsUy9ET0l0MXpIclliWFBBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRVTFmMFgreFVBQVc5SnYzRTh5aFQwekFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEkxTURNeU1ERXlNRGd5TlZvWApEVEkyTURNeU1ERXlNRGd5TlZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTkR0M1lFdzFiSkI5Y0pQMkZsV2VSNnUKWFhUZm1ZN3E3T1hmT3l4L3Q3YWhGTkFsdW85b3VJNUU4RGF1YjVUYnltNmFNNHg3Qk4zM2pETXFKTEdJc0t1SgptblEwQWEzMXc3TTlraGN6YWlPSGszeTdFNUkwQlNTNFE0U2RwRTJlcU1wWnczL3UrWXNXMkxrUW1EMXRNQ25pCk1rN3Y1d3k0Y0ZoNjRPY2tYS2ZtalNWVzlkSnFKbEdnR2MyNHNQb1FGY1I5dkc4dk9XVDJOUVVPOTlHVUFzSkIKU2plaHpuTDlaeER3NHFldDMvWGtUNCt1ektPNll5NG5YQlJBbTJzR05VNjZyZE9UQVlvWHE2M3grNzEvK3RyTApZVUJPTjQraUJzVkd2ZnpXekxDNEVPbDRQdWlUbUY2UzFsVElaeFFOeFZJRi8vMi9PMmZoeHoySWhDNXU1RU1DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFESDNYZkIxSHJoOUNPVkNid0hpM29Ja1RKcDhneHpoCnBxdG1jVGkyRWt0b29UT0UxN2ZvdjZQVXUrZ0xJVjVzWnFlY2REVmZlbmdjMW1DeUdkdnJQS0VKUkhKSVZpUXAKRnNRRFQraHJuUllJY2VNejNqKzlQZnRyQ2xGVTZwbTZ2alhDK2NkVGttYWRvOHhwSnZrR0ZRVXdsMkRnYUg0Mwo5QTI3RVVWZ2tRVXQ5OHIyUXhuMmlmSXlmdmtNQzJDWVNaNHFKdnFqTWllZWxnampoRVZsQXV1ckJ0bDNoNkxUCnM1S3RFcHBoa3BPNjZqM2s1U2lsTE54SGhtYURBeDhZdHdJUVowc1owbjU4L0NheGd2K2xrSkIvOVJGWGE3RHIKRDlCMFFCeTUvOTJEcmwyUFJoa296RnlXemtEN1hOenNjV2wybGlkOWcwaFZFb1V6MGlNN0tKWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  clusterIP: 172.21.0.40
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm edge-25.3.3
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
      volumes:
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
---
apiVersion: policy.linkerd.io/v1beta3
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  clusterIP: 172.21.0.41
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-25.3.3
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      automountServiceAccountToken: false
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.48.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
---
apiVersion: policy.linkerd.io/v1beta3
kind: Server
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  clusterIP: 172.21.0.42
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: b716867249c476481b356bb10611bf287c2fbfdd1de5a0155e8b3633547ba131
        linkerd.io/created-by: linkerd/helm edge-25.3.3
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
---
apiVersion: policy.linkerd.io/v1beta3
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUlsNUs0YTJFZE50QVpYZU90NU83b2t3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TlRBegpNakF4TWpBNE1qVmFGdzB5TmpBek1qQXhNakE0TWpWYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFERG9nbFZGaHRhU1ZlWStPdkVQcmlrUlZtVytvRFVPTFJ1dmVjSkV5aU1vWUU5WXZNWUc5bG1sTFhEd2NibgpCSnFZdHBydTNYWnlOYTZQVVpUQUNRNGZNaDc3NGJpaXZYaHFtc1pKOGkxRTRZY3VBdHBtWG9iM3Q5K1JvUUZGClFWalV0eDJCRElHQXlNUnd2YjNHcTBwYmFGSmV4TTlzc0Q1SDRQVENjWmpWa1B2c3VheEVlTGc2QlBJREhHdS8KMFJ1UldpZE40U0hOUHFDRVpJNWovMCtvSXdCdFZpdFJWekNCazdreVF6U0h4MUp2ZXcxbzU5dm9PRk40SlFIUwpSY3A3a0pvZ0xYcjQ3UGtxeVZ1akNRRGRLcHFxWDlMbUFBSWZiYktLVURORzVFQ2tFb040WHBkSU0zQ1lCTlZRCnB4Uk1JRDl0N0FVR2ViQllDL0tWK2huQkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURCd1BCQ0t2SnJtQlV0MXBObG5ibTUraG5qZSs0amRvSzNpNUFZSWdUZHJLdXhDV2JUbzZRVG91ekUKWGh6eW5hNnU0UHlPY0hUbWhqZ2FXeGszQ2FDdG80KzB3bWMvelVMNWJNd2lQWloyWit1Q1FFRlYxSGl0UGpoUQpSR2FjWmFpbGVRYXRvc1BTdVpsdmJDcW9jNmQzeDlPWjZGM2RBYlhWOW01K0tCdDhBNFlJdkJZbWdNcE5oMGlxCkM0UFp1RjN2TjNmYmlnNWZEY2NVUDVROXcwL1pPUkFVeExTQlYzYi82cDcvNFo1MmJDLzZseXJKd1NoQ3hJekQKb1dJOWt2OWhDZ1NpcDFma2FGanRtdkJuRitmMEZ5SWZMMFFaNU9qRUZuNXFrMk1zNU9LUDlZb01SQThHQnF0dwpEcCt6YlNITkY0VjBkVWRoZ3lrZjJLMlpJbGs1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdzZJSlZSWWJXa2xYbVBqcnhENjRwRVZabHZxQTFEaTBicjNuQ1JNb2pLR0JQV0x6CkdCdlpacFMxdzhIRzV3U2FtTGFhN3QxMmNqV3VqMUdVd0FrT0h6SWUrK0c0b3IxNGFwckdTZkl0Uk9HSExnTGEKWmw2Rzk3ZmZrYUVCUlVGWTFMY2RnUXlCZ01qRWNMMjl4cXRLVzJoU1hzVFBiTEErUitEMHduR1kxWkQ3N0xtcwpSSGk0T2dUeUF4eHJ2OUVia1ZvblRlRWh6VDZnaEdTT1kvOVBxQ01BYlZZclVWY3dnWk81TWtNMGg4ZFNiM3NOCmFPZmI2RGhUZUNVQjBrWEtlNUNhSUMxNitPejVLc2xib3drQTNTcWFxbC9TNWdBQ0gyMnlpbEF6UnVSQXBCS0QKZUY2WFNETndtQVRWVUtjVVRDQS9iZXdGQm5td1dBdnlsZm9ad1FJREFRQUJBb0lCQUFWZE93NUhOZWJLM2drRwp3a2cyUkEvVkN2alYwNVIrSFl4dnpwYjBISWVHb2ltUnZnS3FPTkxVUHd1b0U1RWdFakVmeUszR0NzcGs2RzFyCm1qMk53Z0plK0hTRm91OXJiSkxYdlpvbmR0Qk5zc3d6TGRQaXdhYW5OdzBpTWd1NUYvdDFMZXpzNzl3ZEpTM0cKTmg3dGNYT0NMOGdEYzRDU2NKSzkrMWdkajBoRHppdEIzUnB6NE91Ny85Ri94eEVNYmhUTWFsZjJPTE5jZ0lIWQplYTdFMGNXSVE2eU50OHhRbUdrZmtlK2YvTk1oTFFOcWdrdVpUcDhWeEtkZG1wSU1rZncxTWdqVXViWEpBQzVaCm42SjBxamRoL25vbnRQby90OVJyclBGSlpEQmRxaDF4b3YrSVloaklKazV0emJzblNHUzgwUi95QldzTnUvZVMKeE5JWm9BRUNnWUVBMVc5VjJOeGd2RHF4eTRoWTdMMVFsemRGR1B5SVdaZzZrTWNsQW5NemEveGJWZ1RzaHVpagovRkY3ZjBoMjQzQS95RGQreGpHVExZdnNWelBLdXRkbjNuRnl1dEhGL3lscWJkWGFOVGZRdS9mZGxnVXlIa2tTCjY0bThZTG0yaDNuU2lGY0ZlU0JvMXNXZGR0MmZXc2RHSml0UVdhZjB4eTR0VkNabGl4VzlZb0VDZ1lFQTZxWFkKQllIaHAyNTBhRG1USHlqQXYzQ3Bud0RHenhyR1FMSWpqSjQ5b3pxcGIxQWpnSUVsbzFpeXlWZWxPQUNYNXdTZwpKZDErMFZtSTJsZXd3bVpDNjhsRmxZSW11dGowRnVSclBBKzMwVFl3SG1pLzJhaW1zN0t1dEI0TS91Tzl2aUJhCm5qRk1rQXpoQ2dkUEZ2YWtxYjZnbnR5OUVQV2ZqYm5oQ3FMS2wwRUNnWUFVWkx6NUthVjhsc2NpUVhidHQvRVoKWWNpU2FKN0dvTXNIeGw5ODZuRUJZbTEvdkp5MUQwbUw5R1V1ZGtnVjEwWGc1WnlSWjI4K3JOMzZQeEtoNDY4agpEQWdBWGNiamFKdW92d1JJalhxK1d5S3JFUGdHK01oOEJQOGc1dDNQK0EzcnhSVGF6QVA0Y1kxb0xDanJ6WnFnClR3Y3dhZUh6bmkvcW1IaWZYNFpuQVFLQmdRRFU4MS9pVjZaSUFta29zWi9BZG9hKzl1c3BmMVh1WFJreFc3b0IKZ3hialRYaTVxZHdlWXBhYThRT0kwTDhEM1IzK3JlYjlsay9paE1RN2k3dkNJWFo0Y0RoellDUHdETGN4RTJueQpuejB1WkdRMUpOR0FJcHZ2bDZrUGsvb3RWTmc5ZFRWb1BjdURLLzBMMGVoSUtkejBwQ2szSTVOK2tidVVydTM2CmJoVTRRUUtCZ1FET01yWGYwcWM4dS9rWlZWRFZ5d3RrMHdSZGlyNWVaNXhWYi9EK1ZNMEROUHVhUHRYV0YrcVAKaDJ0eTVHYW9jelhRcVBMUThRTkNxS0ttTERwL0s0TElic2ZLdUJ3U21OcUFtZE5QV2JHczJmZG1pSjQ0VFMrYwp5TVE3S0x4Q1M1cGlQNksvWnlOem9TeFNaQnFVZE5pY2VFZjRuWDY2NVRFMWF3MEFHTmdxTWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUlsNUs0YTJFZE50QVpYZU90NU83b2t3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TlRBegpNakF4TWpBNE1qVmFGdzB5TmpBek1qQXhNakE0TWpWYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFERG9nbFZGaHRhU1ZlWStPdkVQcmlrUlZtVytvRFVPTFJ1dmVjSkV5aU1vWUU5WXZNWUc5bG1sTFhEd2NibgpCSnFZdHBydTNYWnlOYTZQVVpUQUNRNGZNaDc3NGJpaXZYaHFtc1pKOGkxRTRZY3VBdHBtWG9iM3Q5K1JvUUZGClFWalV0eDJCRElHQXlNUnd2YjNHcTBwYmFGSmV4TTlzc0Q1SDRQVENjWmpWa1B2c3VheEVlTGc2QlBJREhHdS8KMFJ1UldpZE40U0hOUHFDRVpJNWovMCtvSXdCdFZpdFJWekNCazdreVF6U0h4MUp2ZXcxbzU5dm9PRk40SlFIUwpSY3A3a0pvZ0xYcjQ3UGtxeVZ1akNRRGRLcHFxWDlMbUFBSWZiYktLVURORzVFQ2tFb040WHBkSU0zQ1lCTlZRCnB4Uk1JRDl0N0FVR2ViQllDL0tWK2huQkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURCd1BCQ0t2SnJtQlV0MXBObG5ibTUraG5qZSs0amRvSzNpNUFZSWdUZHJLdXhDV2JUbzZRVG91ekUKWGh6eW5hNnU0UHlPY0hUbWhqZ2FXeGszQ2FDdG80KzB3bWMvelVMNWJNd2lQWloyWit1Q1FFRlYxSGl0UGpoUQpSR2FjWmFpbGVRYXRvc1BTdVpsdmJDcW9jNmQzeDlPWjZGM2RBYlhWOW01K0tCdDhBNFlJdkJZbWdNcE5oMGlxCkM0UFp1RjN2TjNmYmlnNWZEY2NVUDVROXcwL1pPUkFVeExTQlYzYi82cDcvNFo1MmJDLzZseXJKd1NoQ3hJekQKb1dJOWt2OWhDZ1NpcDFma2FGanRtdkJuRitmMEZ5SWZMMFFaNU9qRUZuNXFrMk1zNU9LUDlZb01SQThHQnF0dwpEcCt6YlNITkY0VjBkVWRoZ3lrZjJLMlpJbGs1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    scope: "Namespaced"
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  clusterIP: 172.21.0.43
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 494ca7f4ea2cb3b5d4d6fc44e09883a64af71c749d7706ab583790a72dbdbbcd
        linkerd.io/created-by: linkerd/helm edge-25.3.3
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
---
apiVersion: policy.linkerd.io/v1beta3
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  clusterIP: 172.21.0.44
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-25.3.3
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-25.3.3
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-25.3.3
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      automountServiceAccountToken: false
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=debug
        - -log-format=plain
        - -enforced-host=^(localhost|k2s.cluster.local|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:edge-25.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
      volumes:
      - name: kube-api-access
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
